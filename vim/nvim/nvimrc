" -------------------------------------
"  _plugins
" -------------------------------------
call plug#begin() " plugins to use
set guicursor=
set mouse=a
set gdefault " always do global substitutions

" autocomplete engine
function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

"Plug 'easymotion/vim-easymotion'
Plug 'jiangmiao/auto-pairs'
Plug 'wakatime/vim-wakatime'
Plug 'junegunn/heytmux'
Plug 'sbdchd/neoformat'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'danro/rename.vim'                             " allow to :Rename files
Plug 'rking/ag.vim'                                 " lightining fast :Ag searcher
Plug 'sheerun/vim-polyglot'
Plug 'chriskempson/base16-vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-sensible'                           " sensible defaults
Plug 'pangloss/vim-javascript'
Plug 'airblade/vim-gitgutter'
Plug 'zchee/deoplete-jedi'
Plug 'szw/vim-g'                                    " search selected text in google
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'rizzatti/dash.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'vim-airline/vim-airline'                      " a nice looking status bar on the bottom
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'fatih/vim-go'
Plug 'nsf/gocode', { 'rtp': 'nvim', 'do': '~/.config/nvim/plugged/gocode/nvim/symlink.sh' }
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
Plug 'zchee/deoplete-go', { 'do': 'make'}
Plug 'carlitux/deoplete-ternjs'                    " js autocomplete

call plug#end()

" --------------------------------------
"  _testing
" --------------------------------------
noremap Q @q
vnoremap <D-c> y
set timeout timeoutlen=1000 ttimeoutlen=10        " faster esc - maybe :|
set showcmd                                       " show me what I'm typing
set autowrite                                     " automatically save before :next, :make etc
set ignorecase                                    " search case insensitive
set smartcase                                     " .. but not when search pattern contains upper case characters
set nocursorcolumn
set nocursorline
set wrap
set textwidth=79
set formatoptions=qrn1
set notimeout
set ttimeout
set ttimeoutlen=10
set nobackup                                      " don't create annoying backup files
" TODO: maybe a plugin is better
set path=+**                                      " search down into subfolders


" --------------------------------------
" _basic vim config
" --------------------------------------
"  TODO: check if some of these settings come as default with neovim
set clipboard^=unnamed                                                                               " copy text to system clipboard
set clipboard^=unnamedplus
let $NVIM_TUI_ENABLE_TRUE_COLOR=1                                          " a nice looking editor
set title                                                                                                           " set terminal title
set whichwrap+=<,>,[,]
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
set completeopt-=preview                          " no annoying scratch preview above
set expandtab                                     " spaces on tabs
set shiftwidth=4
set softtabstop=2
set backspace=indent,eol,start                    " makes backspace key more powerful
set hlsearch                                      " highlight search results
set incsearch                                     " highlight pattern matches as you type
set history=1000                                  " remember everything
set undolevels=1000
set smartindent                                   " indentation
set shortmess=Ia                                  " disable startup message

" open help vertically
command! -nargs=* -complete=help Help vertical belowright help <args>
autocmd FileType help wincmd L

:autocmd InsertEnter,InsertLeave * set cul!       " notify on mode change visually


" --------------------------------------
"  _comma mapping
" --------------------------------------

" --------------------------------------
"  _insert  mapping
" --------------------------------------
inoremap      jk  <Esc>
inoremap      kj  <Esc>
inoremap (<Space>  ();<Esc>hi
inoremap      (;   ();<Esc>o
inoremap      ()   ()

" --------------------------------------
"  _command mapping
" --------------------------------------
cabbrev rp Rp

" --------------------------------------
"  _control mapping
" --------------------------------------
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>
vmap <C-d> :Dash<CR>

let g:ctrlp_map = '<c-k>'
let g:ctrlp_cmd = 'CtrlP'

" --------------------------------------
"  _space mapping
" --------------------------------------
nnoremap <SPACE> <Nop>
let mapleader="\<Space>"

nnoremap <leader>= yypVr=

nnoremap <leader>vimrc :tabe ~/.dotfiles/vim/nvim/nvimrc<cr>

" _single letter 
nmap <Leader>w    :w<CR>  
nnoremap <Leader>q    :q<CR>  
nnoremap <Leader>y    :%y<CR> 
nnoremap <Leader>f   :source $MYVIMRC<CR> 
" search files inside current dir
nnoremap <Leader>e    :Files<CR> 

" switch dir for fzf searching to current dir
map <Leader>cd :lcd %:p:h<CR>
" yank xml block to next line
nnoremap <Leader>aw    vat:t'><CR>'[O<Esc><CR> 
" yank function block
nnoremap <Leader>yf    :exe search('^function','cb')';/}/y'<CR> 
" dash doc lookup
nnoremap <Leader>at   :Dash<CR>
nnoremap <Leader>aa   :wa<CR>
nnoremap <Leader>vq   :wqall<CR>
nnoremap <Leader>vQ   :qa<CR>
nnoremap <Leader>ii   :PlugInstall<CR>
nnoremap <Leader>ia   :PlugUpdate<CR>
nnoremap <Leader>vm   :make<CR>
nnoremap <leader>l :%d<cr>


" run commands in new splits
nnoremap <Leader>tt :tabedit <Bar> term.
nnoremap <Leader>ts :split <Bar> term.
nnoremap <Leader>tv :vsplit <Bar> term.

nnoremap <silent><expr> <C-L> winnr()==g:NERDTree.GetWinNum() ? ":NERDTreeClose\<CR>" : ":NERDTreeFocus\<CR>"
nnoremap <C-s> :w<cr>


nnoremap <Leader>pi :PlugInstall<CR>
nnoremap <Leader>pu :PlugUpdate<CR>
" --------------------------------------
"  _command + shift mapping
" --------------------------------------
nnoremap <D-S-F> :Ack<space>

" -------------------------------------
"  _basic UI config
" -------------------------------------
set relativenumber                    " relative to current posion line numbers
set number                            " show line numbers
set cursorline                        " highlight current line
let python_highlight_all = 1
set showmatch
set tabstop=4                         " default indentation is 4 spaces long and uses tabs, not spaces
set matchtime=2
set background=dark                   " set night mode


" -------------------------------------
"  _activating / modifying plugins
" -------------------------------------
let g:deoplete#enable_at_startup = 1               " activate deoplete

" autocomplete with tab
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"


" run goimports on save
let g:go_fmt_command = "goimports"

" _fzf
" Mapping selecting mappings
nnoremap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})


" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nnoremap ga <Plug>(EasyAlign)

